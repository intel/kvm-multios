#cloud-config

# Copyright (c) 2023 Intel Corporation.
# All rights reserved.
#
# Reference from https://github.com/canonical/autoinstall-desktop/blob/main/autoinstall.yaml

autoinstall:
  # version is an Autoinstall required field.
  version: 1

  # This adds the default ubuntu-desktop packages to the system.
  # Any desired additional packages may also be listed here.
  packages:
    - ubuntu-desktop
    - dbus-x11
    - user-setup
    - libtimezonemap-data
    - libtimezonemap1

  # This adds the default snaps found on a 22.04 Ubuntu Desktop system.
  # Any desired additional snaps may also be listed here.
  snaps:
    - name: firefox
    - name: gnome-3-38-2004
    - name: gtk-common-themes
    - name: snap-store
    - name: snapd-desktop-integration

  # User creation can occur in one of 3 ways:
  # 1. Create a user using this `identity` section.
  # 2. Create users as documented in cloud-init inside the user-data section,
  #    which means this single-user identity section may be removed.
  # 3. Prompt for user configuration on first boot.  Remove this identity
  #    section and see the "Installation without a default user" section.
  #identity:
    #realname: ''
    #username:
    # A password hash is needed. `mkpasswd --method=SHA-512` can help.
    # mkpasswd can be found in the package 'whois'
    #password:
    #hostname:

  # The live-server ISO does not contain some of the required packages,
  # such as ubuntu-desktop or the hwe kernel (or most of their depdendencies).
  # The system being installed will need some sort of apt access.
  proxy: $http_proxy
  http_proxy: $http_proxy
  ftp_proxy: $ftp_proxy
  https_proxy: $https_proxy

  # Subiquity will, by default, configure a partition layout using LVM.
  # The 'direct' layout method shown here will produce a non-LVM result.
  storage:
    layout:
      name: direct

  # Ubuntu Desktop uses the hwe flavor kernel by default.
  early-commands:
    - echo 'linux-generic-hwe-22.04' > /run/kernel-meta-package
    - export http_proxy='$http_proxy'
    - export https_proxy='$https_proxy'
    - export ftp_proxy='$ftp_proxy'
    - export socks_server='$socks_server'
    - export no_proxy='$no_proxy'
    - export HTTP_PROXY='$http_proxy'
    - export HTTPS_PROXY='$https_proxy'
    - export FTP_PROXY='$ftp_proxy'
    - export SOCKS_SERVER='$socks_server'
    - export NO_PROXY='$no_proxy'

  # Install OpenSSH server
  ssh:
    install-server: false

  # Request system to power off after installation
  shutdown: poweroff

  late-commands:
    # Enable the boot splash
    - >-
      curtin in-target --
      sed -i /etc/default/grub -e
      's/GRUB_CMDLINE_LINUX_DEFAULT=".*/GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"/'
    - curtin in-target -- update-grub

    # Let NetworkManager handle network
    - rm /target/etc/netplan/00-installer-config*yaml
    - >-
      printf "network:\n  version: 2\n  renderer: NetworkManager"
      > /target/etc/netplan/01-network-manager-all.yaml
    - curtin in-target -- systemctl disable systemd-networkd

    # Remove default filesystem and related tools not used with the suggested
    # 'direct' storage layout.  These may yet be required if different
    # partitioning schemes are used.
    - >-
      curtin in-target -- apt-get remove -y
      btrfs-progs cryptsetup* lvm2 xfsprogs

    # Remove other packages present by default in Ubuntu Server but not
    # normally present in Ubuntu Desktop.
    - >-
      curtin in-target -- apt-get remove -y
      ubuntu-server ubuntu-server-minimal
      byobu dmeventd finalrd gawk
      mdadm needrestart open-iscsi
      sg3-utils tmux
      sosreport open-vm-tools motd-news-config lxd-agent-loader
      landscape-common fonts-ubuntu-console

    # Keep cloud-init, as it performs some of the installation on first boot.
    - curtin in-target -- apt-get install -y cloud-init

    # Finally, remove things only installed as dependencies of other things
    # we have already removed.
    - curtin in-target -- apt-get autoremove -y

    # Set up proxy environment variables
    - export http_proxy='$http_proxy'
    - export https_proxy='$https_proxy'
    - export ftp_proxy='$ftp_proxy'
    - export socks_server='$socks_server'
    - export no_proxy='$no_proxy'
    - export HTTP_PROXY='$http_proxy'
    - export HTTPS_PROXY='$https_proxy'
    - export FTP_PROXY='$ftp_proxy'
    - export SOCKS_SERVER='$socks_server'
    - export NO_PROXY='$no_proxy'
    - echo 'http_proxy=$http_proxy' >> /target/etc/environment
    - echo 'https_proxy=$https_proxy' >> /target/etc/environment
    - echo 'ftp_proxy=$ftp_proxy' >> /target/etc/environment
    - echo 'socks_server=$socks_server' >> /target/etc/environment
    - echo 'no_proxy=$no_proxy' >> /target/etc/environment
    - echo 'HTTP_PROXY=$http_proxy' >> /target/etc/environment
    - echo 'HTTPS_PROXY=$https_proxy' >> /target/etc/environment
    - echo 'FTP_PROXY=$ftp_proxy' >> /target/etc/environment
    - echo 'SOCKS_SERVER=$socks_server' >> /target/etc/environment
    - echo 'NO_PROXY=$no_proxy' >> /target/etc/environment
    - curtin in-target -- snap set system proxy.http=$http_proxy
    - curtin in-target -- snap set system proxy.https=$https_proxy
    - systemctl restart snapd.service

    # Install language packs for English
    - curtin in-target -- apt install -y $(check-language-support -l en)

    # A postinstall script may optionally be used for further install
    # customization. Deploy this postinstall.sh script on the webserver.
    - wget --no-proxy -O /target/tmp/setup_bsp.sh $FILE_SERVER_URL/setup_bsp.sh
    - curtin in-target -- chmod +x /tmp/setup_bsp.sh
    - curtin in-target -- bash /tmp/setup_bsp.sh $KERN_INSTALL_OPTION $RT_SUPPORT
    - wget --no-proxy -O /target/usr/local/bin/setup_swap.sh $FILE_SERVER_URL/setup_swap.sh
    - curtin in-target -- chmod +x /usr/local/bin/setup_swap.sh
    - curtin in-target -- bash /usr/local/bin/setup_swap.sh
    - wget --no-proxy -O /target/tmp/setup_pm_mgmt.sh $FILE_SERVER_URL/setup_pm_mgmt.sh
    - curtin in-target -- chmod +x /tmp/setup_pm_mgmt.sh
    - curtin in-target -- bash /tmp/setup_pm_mgmt.sh
    - rm /target/tmp/setup_bsp.sh
    - rm /target/tmp/setup_pm_mgmt.sh
    - cp /var/log/syslog /tmp/syslog_setup

  # back up setup log on error
  error-commands:
    - cp /var/log/syslog /tmp/syslog_setup

  # Additional cloud-init configuration affecting the target
  # system can be supplied underneath a user-data section inside of
  # autoinstall.
  user-data:
    # This inhibits user creation, which for Desktop images means that
    # gnome-initial-setup will prompt for user creation on first boot.  
    users: ['']
    runcmd:
      - cp /var/log/syslog /tmp/syslog_setup_cont
      # shutdown after install
      - shutdown
